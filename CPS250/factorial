.data
str: .asciiz "Please input an integer n: "
result: .asciiz "The result is Fact(n) = "

.text
.globl main

main:
    # Print the prompt string
    li $v0, 4            # syscall for print_string
    la $a0, str          # load address of prompt string
    syscall

    # Read input integer
    li $v0, 5            # syscall for read_int
    syscall
    move $a0, $v0        # move input value to $a0

    # Call factorial function
    jal fact              # jump to factorial function
    move $t0, $v0        # move result from $v0 to $t0

    # Print the result string
    li $v0, 4            # syscall for print_string
    la $a0, result       # load address of result string
    syscall

    # Print the result
    li $v0, 1            # syscall for print integer
    move $a0, $t0        # move result to $a0
    syscall

    # Exit program
    li $v0, 10           # syscall for exit
    syscall

# Factorial function
fact:
    addi $sp, $sp, -8     # allocate stack space
    sw $ra, 4($sp)        # save return address
    sw $a0, 0($sp)        # save argument n

    # Base case: if n == 0, return 1
    beqz $a0, base_case

    # Recursive case: n * fact(n - 1)
    addi $a0, $a0, -1     # n = n - 1
    jal fact              # recursive call
    lw $a0, 0($sp)        # retrieve original n
    lw $ra, 4($sp)        # retrieve return address
    mul $v0, $a0, $v0     # return n * fact(n - 1)

    j reg_return           # jump to return

base_case:
    li $v0, 1             # return 1 for base case

reg_return:
    lw $ra, 4($sp)        # restore return address
    addi $sp, $sp, 8      # deallocate stack space
    jr $ra                 # return to caller
